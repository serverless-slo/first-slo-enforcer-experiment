package main

import (
	"context"

	faasslo "github.com/ngduchai/faasslo/api/v1alpha1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/runtime/serializer"
	"k8s.io/client-go/rest"
)

const (
	CRDPlural   string = "slodescs"
	CRDGroup    string = "slo.ibm.com"
	CRDVersion  string = "v1alpha1"
	FullCRDName string = CRDPlural + "." + CRDGroup
)

// OrderPayload saves the details of order
type OrderPayload struct {
	ContainerID  string  `json:"containerID"`
	OrderID      string  `json:"orderID"`
	Timestamp    int64   `json:"timestamp"`
	MidTimestamp []int64 `json:"mid"`
}

// ContainerPayload saves the details of container
type ContainerPayload struct {
	ContainerID string `json:"containerID"`
	OrderID     string `json:"orderID"`
}

// OrderEvent generated by the spring container
type OrderEvent struct {
	Timestamp int64        `json:"timestamp"`
	Payload   OrderPayload `json:"payload"`
	Type      string       `json:"type"`
}

// ContainerAssignedToOrder show which container is assigned to which order
type ContainerAssignedToOrder struct {
	ContainerID string           `json:"containerID"`
	Payload     ContainerPayload `json:"payload"`
	Type        string           `json:"type"`
}

var SchemeGroupVersion = schema.GroupVersion{Group: CRDGroup, Version: CRDVersion}

func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&faasslo.SLODesc{},
		&faasslo.SLODesc{},
	)
	meta_v1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}

type FaaSSloV1Alpha1Client struct {
	restClient rest.Interface
}

func (c *FaaSSloV1Alpha1Client) SloDescs(namespace string) FaaSSloInterface {
	return &SloDescClient{
		client: c.restClient,
		ns:     namespace,
	}
}

type FaaSSloInterface interface {
	Create(obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error)
	Update(name string, obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error)
	Delete(name string, ctx context.Context, options *meta_v1.DeleteOptions) error
	Get(name string, ctx context.Context) (*faasslo.SLODesc, error)
	UpdateStatus(name string, obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error)
}

type SloDescClient struct {
	client rest.Interface
	ns     string
}

func (c *SloDescClient) Create(obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error) {
	result := &faasslo.SLODesc{}
	err := c.client.Post().
		Namespace(c.ns).Resource("SLODescs").
		Body(obj).Do(ctx).Into(result)
	return result, err
}

func (c *SloDescClient) Update(name string, obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error) {
	result := &faasslo.SLODesc{}
	err := c.client.Put().
		Namespace(c.ns).Resource("SLODescs").Name(name).
		Body(obj).Do(ctx).Into(result)
	return result, err
}

func (c *SloDescClient) UpdateStatus(name string, obj *faasslo.SLODesc, ctx context.Context) (*faasslo.SLODesc, error) {
	result := &faasslo.SLODesc{}
	err := c.client.Put().
		Namespace(c.ns).Resource("SLODescs").Name(name).SubResource("status").
		Body(obj).Do(ctx).Into(result)
	return result, err
}

func (c *SloDescClient) Delete(name string, ctx context.Context, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).Resource("SLODescs").
		Name(name).Body(options).Do(ctx).
		Error()
}

func (c *SloDescClient) Get(name string, ctx context.Context) (*faasslo.SLODesc, error) {
	result := &faasslo.SLODesc{}
	err := c.client.Get().
		Namespace(c.ns).Resource("SLODescs").
		Name(name).Do(ctx).Into(result)
	return result, err
}

func NewFaaSSloClient(cfg *rest.Config) (*FaaSSloV1Alpha1Client, error) {
	scheme := runtime.NewScheme()
	SchemeBuilder := runtime.NewSchemeBuilder(addKnownTypes)
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	config := *cfg
	config.GroupVersion = &SchemeGroupVersion
	config.APIPath = "/apis"
	config.ContentType = runtime.ContentTypeJSON
	config.NegotiatedSerializer = serializer.NewCodecFactory(scheme)
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &FaaSSloV1Alpha1Client{restClient: client}, nil
}
